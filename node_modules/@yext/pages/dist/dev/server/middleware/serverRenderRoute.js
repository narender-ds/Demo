import { propsLoader } from "../ssr/propsLoader.js";
import { urlToFeature } from "../ssr/urlToFeature.js";
import page404 from "../public/404.js";
import { featureNameToTemplateModuleInternal } from "../ssr/featureNameToTemplateModuleInternal.js";
import {
  renderHeadConfigToString,
  getLang
} from "../../../common/src/template/head.js";
import templateBase from "../public/templateBase.js";
import { lookup } from "mime-types";
import { getTemplateFilepaths } from "../../../common/src/template/internal/getTemplateFilepaths.js";
const serverRenderRoute = ({ vite, dynamicGenerateData, projectStructure }) => async (req, res, next) => {
  try {
    const url = new URL("http://" + req.headers.host + req.originalUrl);
    const { feature, entityId, locale } = urlToFeature(url);
    const templateFilepaths = getTemplateFilepaths(
      projectStructure.scopedTemplatesPath ? [
        projectStructure.scopedTemplatesPath,
        projectStructure.templatesRoot
      ] : [projectStructure.templatesRoot]
    );
    const templateModuleInternal = await featureNameToTemplateModuleInternal(
      vite,
      feature,
      templateFilepaths
    );
    if (!templateModuleInternal) {
      console.error(
        `Cannot find template corresponding to feature: ${feature}`
      );
      return res.status(404).end(page404);
    }
    const props = await propsLoader({
      templateModuleInternal,
      entityId,
      locale,
      dynamicGenerateData,
      projectStructure
    });
    if (templateModuleInternal.render) {
      res.status(200).type(getContentType(templateModuleInternal, props)).end(templateModuleInternal.render(props));
      return;
    }
    const React = await import("react");
    const ReactDOMServer = await import("react-dom/server");
    const appHtml = ReactDOMServer.renderToString(
      React.createElement(templateModuleInternal.default || "", props)
    );
    const headConfig = templateModuleInternal.getHeadConfig ? templateModuleInternal.getHeadConfig(props) : void 0;
    const template = await vite.transformIndexHtml(
      url.pathname,
      templateBase
    );
    const html = template.replace(`<!--app-html-->`, appHtml).replace(
      `<!--app-head-->`,
      `<head>
            <script type="text/javascript">
              window._RSS_PROPS_ = ${JSON.stringify(props)};
              window._RSS_TEMPLATE_PATH_ = '${templateModuleInternal.path}';
              window._RSS_LANG_ = '${getLang(headConfig, props)}';
            <\/script>
            ${headConfig ? renderHeadConfigToString(headConfig) : ""}
          </head>`
    );
    res.status(200).type(getContentType(templateModuleInternal, props)).end(html);
  } catch (e) {
    next(e);
  }
};
const getContentType = (templateModuleInternal, props) => {
  const path = templateModuleInternal.getPath(props);
  return lookup(path) || "text/html";
};
export {
  serverRenderRoute
};
